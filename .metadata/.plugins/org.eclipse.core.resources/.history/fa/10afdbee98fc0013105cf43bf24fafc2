package com.example.tests;

import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.example.utils.SortedListOf;

public class GroupCreationTests extends TestBase{
	@DataProvider
	public Iterator<Object[]> groupsFromCSVFile() throws IOException {
		return wrapGroupsForDataProvider(loadGroupsFromCsvFile(new File("groups.txt"))).iterator();
	}
	
	private List<GroupData> loadGroupsFromCsvFile(File file) throws IOException {
		List<GroupData> groups = new ArrayList<GroupData>();
		FileReader reader = new FileReader(file);
		BufferedReader bufferedReader = new BufferedReader(reader);
		String line = bufferedReader.readLine();
		while (line != null) {
			String[] parts = line.split(",");
			GroupData group = new GroupData()
			.withName(parts[0])
			.withHeader(parts[1])
			.withFooter(parts[2]);
			groups.add(group);
			line = bufferedReader.readLine();
		}
		reader.close();
		return groups;
	}

	@Test(dataProvider = "groupsFromCSVFile")

  public void testAddNewGroupWithValidData(GroupData myGroupData) throws IOException {
   	
    // save old state
    SortedListOf<GroupData> oldList = app.getGroupHelper().getGroups();
    
    // actions
    app.getGroupHelper().createGroup(myGroupData);
    
    //save new state
    SortedListOf<GroupData> newList = app.getGroupHelper().getGroups();
    
    // compare two states
    assertThat(newList, equalTo(oldList.withAdded(myGroupData)));
  }
}
